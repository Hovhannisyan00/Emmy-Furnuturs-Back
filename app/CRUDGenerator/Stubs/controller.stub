<?php

namespace App\Http\Controllers\Dashboard;

use App\Http\Requests\{{ CLASS_NAME }}\{{ CLASS_NAME }}Request;
use App\Http\Requests\{{ CLASS_NAME }}\{{ CLASS_NAME }}SearchRequest;
use App\Models\{{ CLASS_NAME }}\{{ CLASS_NAME }}Search;
use App\Services\{{ CLASS_NAME }}\{{ CLASS_NAME }}Service;
use App\Contracts\{{ CLASS_NAME }}\I{{ CLASS_NAME }}Repository;
use Illuminate\Http\JsonResponse;
use Illuminate\Contracts\View\View;

/**
 * Class {{ CLASS_NAME }}Controller
 * @package App\Http\Controllers\Dashboard
 */
class {{ CLASS_NAME }}Controller extends BaseController
{
    /**
     * {{ CLASS_NAME }}Controller constructor.
     *
     * @param {{ CLASS_NAME }}Service $service
     * @param I{{ CLASS_NAME }}Repository $repository
     */
    public function __construct(
        {{ CLASS_NAME }}Service $service,
        I{{ CLASS_NAME }}Repository $repository
    )
    {
        parent::__construct($service);

        $this->repository = $repository;
    }

    /**
     * Function to return {{ SINGULAR_CLASS_NAME }} index view
     *
     * @return View
     */
    public function index(): View
    {
        return $this->dashboardView('{{ FOLDER_NAME }}.index');
    }

    /**
     * Function to return {{ PLURAL_CLASS_NAME }} list
     *
     * @param {{ CLASS_NAME }}SearchRequest $request
     * @return array
     */
    public function getListData({{ CLASS_NAME }}SearchRequest $request): array
    {
        $searcher = new {{ CLASS_NAME }}Search($request->validated());

        return [
            'recordsTotal' => $searcher->totalCount(),
            'recordsFiltered' => $searcher->filteredCount(),
            'data' => $searcher->search(),
        ];
    }

    /**
     * Function to return {{ SINGULAR_CLASS_NAME }} create view
     *
     * @return View
     */
    public function create(): View
    {
        return $this->dashboardView('{{ FOLDER_NAME }}.form', []);
    }

    /**
     * Function to store {{ SINGULAR_CLASS_NAME }}
     *
     * @param {{ CLASS_NAME }}Request $request
     * @return JsonResponse
     */
    public function store({{ CLASS_NAME }}Request $request): JsonResponse
    {
        $this->repository->create($request->validated());

        return $this->sendOkCreated([
            'redirectUrl' => route('dashboard.{{ PLURAL_CLASS_NAME }}.index')
        ]);
    }

    /**
     * Function to show {{ SINGULAR_CLASS_NAME }}
     *
     * @param int $id
     */
    public function show(int $id)
    {
        //
    }

    /**
     * Function to return {{ SINGULAR_CLASS_NAME }} edit view
     *
     * @param int $id
     * @return View
     */
    public function edit(int $id): View
    {
        ${{ FOLDER_NAME }} = $this->repository->findOrFail($id);

        return $this->dashboardView('{{ FOLDER_NAME }}.form', ['{{ FOLDER_NAME }}' => ${{ FOLDER_NAME }}], 'edit');
    }

    /**
     * Function to update {{ SINGULAR_CLASS_NAME }}
     *
     * @param {{ CLASS_NAME }}Request $request
     * @param int $id
     * @return JsonResponse
     */
    public function update({{ CLASS_NAME }}Request $request, int $id): JsonResponse
    {
        $this->repository->update($id, $request->validated());

        return $this->sendOkUpdated([
            'redirectUrl' => route('dashboard.{{ PLURAL_CLASS_NAME }}.index')
        ]);
    }

    /**
     * Function to delete {{ SINGULAR_CLASS_NAME }}
     *
     * @param int $id
     * @return JsonResponse
     */
    public function destroy(int $id): JsonResponse
    {
        $this->repository->destroy($id);
        return $this->sendOkDeleted();
    }
}
